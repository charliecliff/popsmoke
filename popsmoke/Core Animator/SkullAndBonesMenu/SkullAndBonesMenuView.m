//
// SkullAndBonesMenuView.m
// Generated by Core Animator version 1.3.1 on 2/2/17.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

#import "SkullAndBonesMenuView.h"

@interface SkullAndBonesMenuView ()
@property (strong, nonatomic) NSMapTable *completionBlocksByAnimation;
@end

@implementation SkullAndBonesMenuView

#pragma mark - Life Cycle

- (instancetype)init
{
	return [self initWithFrame:CGRectMake(0,0,44,44)];
}

- (instancetype)initWithFrame:(CGRect)frame
{
	self = [super initWithFrame:frame];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

- (instancetype)initWithCoder:(NSCoder *)coder
{
	self = [super initWithCoder:coder];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

#pragma mark - Scaling

- (void)layoutSubviews
{
	[super layoutSubviews];

	UIView *scalingView = self.viewsByName[@"__scaling__"];
	float xScale = self.bounds.size.width / scalingView.bounds.size.width;
	float yScale = self.bounds.size.height / scalingView.bounds.size.height;
	switch (self.contentMode) {
		case UIViewContentModeScaleToFill:
			break;
		case UIViewContentModeScaleAspectFill:
		{
			float scale = MAX(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
		default:
		{
			float scale = MIN(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
	}
	scalingView.transform = CGAffineTransformMakeScale(xScale, yScale);
	scalingView.center = CGPointMake(CGRectGetMidX(self.bounds), CGRectGetMidY(self.bounds));
}

#pragma mark - Setup

- (void)setupHierarchy
{
	self.completionBlocksByAnimation = [NSMapTable mapTableWithKeyOptions:NSPointerFunctionsOpaqueMemory valueOptions:NSPointerFunctionsStrongMemory];
	NSMutableDictionary *viewsByName = [NSMutableDictionary dictionary];
	NSBundle *bundle = [NSBundle bundleForClass:[self class]];

	UIView *__scaling__ = [UIView new];
	__scaling__.bounds = CGRectMake(0, 0, 44, 44);
	__scaling__.center = CGPointMake(22.0, 22.0);
	[self addSubview:__scaling__];
	viewsByName[@"__scaling__"] = __scaling__;

	UIImageView *bottomBar = [UIImageView new];
	bottomBar.bounds = CGRectMake(0, 0, 44.0, 44.0);
	bottomBar.layer.anchorPoint = CGPointMake(0.500, 0.768);
	UIImage *imgBottomBar = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"bottomBar.png" ofType:nil]];
	if ( imgBottomBar == nil ) { NSLog(@"** Warning: Could not create image from 'bottomBar.png'. Please make sure that it is added to the project directly (not in a folder reference)."); }
	bottomBar.image = imgBottomBar;
	bottomBar.contentMode = UIViewContentModeCenter;
	bottomBar.layer.position = CGPointMake(22.000, 33.789);
	[__scaling__ addSubview:bottomBar];
	viewsByName[@"bottomBar"] = bottomBar;

	UIImageView *middleBar = [UIImageView new];
	middleBar.bounds = CGRectMake(0, 0, 44.0, 44.0);
	UIImage *imgMiddleBar = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"middleBar.png" ofType:nil]];
	if ( imgMiddleBar == nil ) { NSLog(@"** Warning: Could not create image from 'middleBar.png'. Please make sure that it is added to the project directly (not in a folder reference)."); }
	middleBar.image = imgMiddleBar;
	middleBar.contentMode = UIViewContentModeCenter;
	middleBar.layer.position = CGPointMake(22.000, 22.000);
	[__scaling__ addSubview:middleBar];
	viewsByName[@"middleBar"] = middleBar;

	UIImageView *topBar = [UIImageView new];
	topBar.bounds = CGRectMake(0, 0, 44.0, 44.0);
	UIImage *imgTopBar = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"topBar.png" ofType:nil]];
	if ( imgTopBar == nil ) { NSLog(@"** Warning: Could not create image from 'topBar.png'. Please make sure that it is added to the project directly (not in a folder reference)."); }
	topBar.image = imgTopBar;
	topBar.contentMode = UIViewContentModeCenter;
	topBar.layer.position = CGPointMake(22.000, 22.000);
	[__scaling__ addSubview:topBar];
	viewsByName[@"topBar"] = topBar;

	UIImageView *skullandBones = [UIImageView new];
	skullandBones.bounds = CGRectMake(0, 0, 44.0, 44.0);
	UIImage *imgSkullandBones = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"SkullandBones.png" ofType:nil]];
	if ( imgSkullandBones == nil ) { NSLog(@"** Warning: Could not create image from 'SkullandBones.png'. Please make sure that it is added to the project directly (not in a folder reference)."); }
	skullandBones.image = imgSkullandBones;
	skullandBones.contentMode = UIViewContentModeCenter;
	skullandBones.layer.position = CGPointMake(22.000, 22.000);
	skullandBones.alpha = 0.00;
	[__scaling__ addSubview:skullandBones];
	viewsByName[@"SkullandBones"] = skullandBones;

	self.viewsByName = viewsByName;
}

#pragma mark - Skull Appear

- (void)addSkullAppearAnimation
{
	[self addSkullAppearAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:NULL];
}

- (void)addSkullAppearAnimationWithCompletion:(void (^)(BOOL finished))completionBlock
{
	[self addSkullAppearAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:completionBlock];
}

- (void)addSkullAppearAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion
{
	[self addSkullAppearAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:NULL];
}

- (void)addSkullAppearAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	[self addSkullAppearAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:completionBlock];
}

- (void)addSkullAppearAnimationWithBeginTime:(CFTimeInterval)beginTime andFillMode:(NSString *)fillMode andRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	CAMediaTimingFunction *linearTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];

	if (completionBlock)
	{
		CABasicAnimation *representativeAnimation = [CABasicAnimation animationWithKeyPath:@"not.a.real.key"];
		representativeAnimation.duration = 0.300;
		representativeAnimation.delegate = self;
		[self.layer addAnimation:representativeAnimation forKey:@"SkullAppear"];
		[self.completionBlocksByAnimation setObject:completionBlock forKey:[self.layer animationForKey:@"SkullAppear"]];
	}

	CAKeyframeAnimation *bottomBarRotationAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.rotation.z"];
	bottomBarRotationAnimation.duration = 0.300;
	bottomBarRotationAnimation.values = @[@(0.000), @(-0.349), @(-0.349)];
	bottomBarRotationAnimation.keyTimes = @[@(0.000), @(0.667), @(1.000)];
	bottomBarRotationAnimation.timingFunctions = @[linearTiming, linearTiming];
	bottomBarRotationAnimation.beginTime = beginTime;
	bottomBarRotationAnimation.fillMode = fillMode;
	bottomBarRotationAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"bottomBar"] layer] addAnimation:bottomBarRotationAnimation forKey:@"Skull Appear_Rotation"];

	CAKeyframeAnimation *topBarOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
	topBarOpacityAnimation.duration = 0.300;
	topBarOpacityAnimation.values = @[@(1.000), @(0.000), @(0.000)];
	topBarOpacityAnimation.keyTimes = @[@(0.000), @(0.667), @(1.000)];
	topBarOpacityAnimation.timingFunctions = @[linearTiming, linearTiming];
	topBarOpacityAnimation.beginTime = beginTime;
	topBarOpacityAnimation.fillMode = fillMode;
	topBarOpacityAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"topBar"] layer] addAnimation:topBarOpacityAnimation forKey:@"Skull Appear_Opacity"];

	CAKeyframeAnimation *skullandBonesOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
	skullandBonesOpacityAnimation.duration = 0.300;
	skullandBonesOpacityAnimation.values = @[@(0.000), @(0.000), @(1.000)];
	skullandBonesOpacityAnimation.keyTimes = @[@(0.000), @(0.667), @(1.000)];
	skullandBonesOpacityAnimation.timingFunctions = @[linearTiming, linearTiming];
	skullandBonesOpacityAnimation.beginTime = beginTime;
	skullandBonesOpacityAnimation.fillMode = fillMode;
	skullandBonesOpacityAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"SkullandBones"] layer] addAnimation:skullandBonesOpacityAnimation forKey:@"Skull Appear_Opacity"];

	CAKeyframeAnimation *middleBarRotationAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.rotation.z"];
	middleBarRotationAnimation.duration = 0.300;
	middleBarRotationAnimation.values = @[@(0.000), @(0.349), @(0.349)];
	middleBarRotationAnimation.keyTimes = @[@(0.000), @(0.667), @(1.000)];
	middleBarRotationAnimation.timingFunctions = @[linearTiming, linearTiming];
	middleBarRotationAnimation.beginTime = beginTime;
	middleBarRotationAnimation.fillMode = fillMode;
	middleBarRotationAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"middleBar"] layer] addAnimation:middleBarRotationAnimation forKey:@"Skull Appear_Rotation"];

	CAKeyframeAnimation *middleBarTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
	middleBarTranslationXAnimation.duration = 0.300;
	middleBarTranslationXAnimation.values = @[@(0.000), @(-0.000), @(-0.000)];
	middleBarTranslationXAnimation.keyTimes = @[@(0.000), @(0.667), @(1.000)];
	middleBarTranslationXAnimation.timingFunctions = @[linearTiming, linearTiming];
	middleBarTranslationXAnimation.beginTime = beginTime;
	middleBarTranslationXAnimation.fillMode = fillMode;
	middleBarTranslationXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"middleBar"] layer] addAnimation:middleBarTranslationXAnimation forKey:@"Skull Appear_TranslationX"];

	CAKeyframeAnimation *middleBarTranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
	middleBarTranslationYAnimation.duration = 0.300;
	middleBarTranslationYAnimation.values = @[@(0.000), @(12.142), @(12.142)];
	middleBarTranslationYAnimation.keyTimes = @[@(0.000), @(0.667), @(1.000)];
	middleBarTranslationYAnimation.timingFunctions = @[linearTiming, linearTiming];
	middleBarTranslationYAnimation.beginTime = beginTime;
	middleBarTranslationYAnimation.fillMode = fillMode;
	middleBarTranslationYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"middleBar"] layer] addAnimation:middleBarTranslationYAnimation forKey:@"Skull Appear_TranslationY"];
}

- (void)removeSkullAppearAnimation
{
	[self.layer removeAnimationForKey:@"SkullAppear"];
	[[self.viewsByName[@"bottomBar"] layer] removeAnimationForKey:@"Skull Appear_Rotation"];
	[[self.viewsByName[@"topBar"] layer] removeAnimationForKey:@"Skull Appear_Opacity"];
	[[self.viewsByName[@"SkullandBones"] layer] removeAnimationForKey:@"Skull Appear_Opacity"];
	[[self.viewsByName[@"middleBar"] layer] removeAnimationForKey:@"Skull Appear_Rotation"];
	[[self.viewsByName[@"middleBar"] layer] removeAnimationForKey:@"Skull Appear_TranslationX"];
	[[self.viewsByName[@"middleBar"] layer] removeAnimationForKey:@"Skull Appear_TranslationY"];
}

- (void)animationDidStop:(CAAnimation *)anim finished:(BOOL)flag
{
	void (^completion)(BOOL) = [self.completionBlocksByAnimation objectForKey:anim];
	[self.completionBlocksByAnimation removeObjectForKey:anim];
	if (completion)
	{
		completion(flag);
	}
}

- (void)removeAllAnimations
{
	for (UIView *view in self.viewsByName.allValues)
	{
		[view.layer removeAllAnimations];
	}
	[self.layer removeAnimationForKey:@"SkullAppear"];
}

@end